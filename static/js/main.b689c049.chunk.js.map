{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundaries.js","components/robots.js","constants.js","containers/App.js","actions.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","email","name","id","className","src","alt","CardList","CardsArray","robots","map","user","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","ErrorBoundaries","props","state","hasError","error","errorInfo","this","setState","children","Component","CHANGE_SEARCH_FIELD","App","fetch","then","response","json","users","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","style","height","href","rel","React","connect","dispatch","event","text","target","value","payload","intialState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","store","createStore","action","Object","assign","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b689c049.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ email, name, id }) => {\r\n    return (\r\n        <div className=\"tc bg-yellow dib br3 pa3 ma3 grow shadow-4 \">\r\n            <div className=\"tc\">\r\n                <img src={`https://robohash.org/${id}?size=200x200`} alt='' />\r\n            </div>\r\n            <div className=\"fc\">\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    const CardsArray = robots.map(user => {\r\n        return (\r\n            <Card\r\n                key={user.id}\r\n                id={user.id}\r\n                name={user.name}\r\n                email={user.email}\r\n            />\r\n        );\r\n    });\r\n    return (\r\n        <div>\r\n            {CardsArray}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div>\r\n            <input\r\n                aria-label=\"search robots\"\r\n                type=\"text\"\r\n                placeholder=\"Search\"\r\n                className=\"tc pa3 bg-near-black yellow mb3\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundaries extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({ hasError: true });\r\n    }\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>oops something went wrong!</h1>\r\n        } else {\r\n            return this.props.children\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundaries;","export const robots = [\r\n    {\r\n        id: 1,\r\n        name: 'Hellen',\r\n        email: 'hellen@qoogle.com'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Rohan',\r\n        email: 'rohan@qoogle.com'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Sid',\r\n        email: 'sid@qoogle.com'\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Virat',\r\n        email: 'virat@qoogle.com'\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Sachin',\r\n        email: 'sachin@qoogle.com'\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Yuvraj',\r\n        email: 'yuvraj@qoogle.com'\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Shikhar',\r\n        email: 'shikhar@qoogle.com'\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Raina',\r\n        email: 'raina@qoogle.com'\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'David',\r\n        email: 'david@qoogle.com'\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Krish',\r\n        email: 'krish@qoogle.com'\r\n    }\r\n];","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport ErrorBoundaries from '../components/ErrorBoundaries';\r\nimport { robots } from '../components/robots';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport { setSearchField } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { searchField: state.searchField };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return { onSearchChange: (event) => dispatch(setSearchField(event.target.value)) }\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: robots,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => { this.setState({ robots: users }) });\r\n    }\r\n\r\n    render() {\r\n        const { robots } = this.state;\r\n        const { searchField, onSearchChange } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        if (!robots.length) {\r\n            return (\r\n                <div>\r\n                    <h1 className=\"tc\">Loading...</h1>\r\n                    <h1 className=\"tc\">refresh if does not load</h1>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <Scrollbars style={{ height: '100vh' }}>\r\n                    <div className=\"pa1 tc\">\r\n                        <link href=\"https://fonts.googleapis.com/css2?family=Quantico&display=swap\" rel=\"stylesheet\"></link>\r\n                        <div id=\"pallete\" className=\"tc ma3 pa1 br3 mt5 pb4 shadow-4 \">\r\n                            <h1 id=\"title\" className=\"f1 garamond\">Robo-Contacts</h1>\r\n                            <SearchBox searchChange={onSearchChange} />\r\n                            <ErrorBoundaries>\r\n                                <Scrollbars style={{ height: 350 }}>\r\n                                    <CardList className=\"tc\" robots={filteredRobots} />\r\n                                </Scrollbars>\r\n                            </ErrorBoundaries>\r\n                        </div>\r\n                    </div>\r\n                </Scrollbars>\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCH_FIELD} from './constants.js';\r\n\r\nexport const setSearchField = (text) => (\r\n    {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n)\r\n","import { CHANGE_SEARCH_FIELD } from './constants.js';\r\n\r\nconst intialState = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = intialState, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })\r\n        default:\r\n            return state;\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport './components/Card.css';\r\nimport App from './containers/App';\r\nimport 'tachyons';\r\nimport { searchRobots } from './reducers.js';\r\n\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(searchRobots);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}